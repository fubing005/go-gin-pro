package websocket

import (
	"fmt"
	"net/http"
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
)

type Message struct {
	Act      string `json:"act"`
	Type     string `json:"type"`
	Sender   string `json:"sender"`
	Receiver string `json:"receiver"`
	Content  string `json:"content"`
}

type ChatController struct {
	Upgrader websocket.Upgrader
	Clients  map[string]*websocket.Conn // 存储用户 ID -> WebSocket 连接
	Mutex    sync.Mutex
}

// NewChatController 创建 ChatController 实例
func NewChatController() *ChatController {
	return &ChatController{
		Upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool { return true },
		},
		Clients: make(map[string]*websocket.Conn),
	}
}

// ChatMessage 处理 WebSocket 连接
func (cc *ChatController) ChatMessage(c *gin.Context) {
	userID := c.Query("id")
	if userID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"code": 400, "error": "用户 ID 不能为空"})
		return
	}

	// WebSocket 连接升级
	conn, err := cc.Upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "WebSocket 连接失败"})
		return
	}

	// 设置最大消息大小
	conn.SetReadLimit(1024 * 1024)

	// 存储连接
	cc.Mutex.Lock()
	cc.Clients[userID] = conn
	cc.Mutex.Unlock()

	// 发送连接成功信息
	openMsg := fmt.Sprintf(`{"act":"open","success": "用户{\"user_id\": \"%s\"} 连接成功"}`, userID)
	conn.WriteMessage(websocket.TextMessage, []byte(openMsg))

	// 监听客户端消息
	defer func() {
		cc.Mutex.Lock()
		delete(cc.Clients, userID)
		cc.Mutex.Unlock()
		conn.Close()
	}()

	// 监听消息
	for {
		var msg Message
		err := conn.ReadJSON(&msg)
		if err != nil {
			fmt.Printf("用户 %s 读取消息失败: %v\n", userID, err)
			break
		}

		msg.Act = "message"
		cc.SendMessage(msg)
	}
}

// SendMessage 发送消息给指定用户
func (cc *ChatController) SendMessage(msg Message) {
	cc.Mutex.Lock()
	senderConn, senderExists := cc.Clients[msg.Sender]
	receiverConn, receiverExists := cc.Clients[msg.Receiver]
	cc.Mutex.Unlock()

	if !senderExists {
		return
	}

	if receiverExists {
		err := receiverConn.WriteJSON(msg)
		if err != nil {
			senderConn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(`{"act":"message","error": "用户{%s} 发送消息失败"}`, msg.Receiver)))
		}
	} else {
		senderConn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(`{"act":"message","error": "用户{%s} 不在线，消息未送达"}`, msg.Receiver)))
	}
}
