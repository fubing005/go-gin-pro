package global

import (
	"fmt"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

// Upgrader 将 HTTP 连接升级为 WebSocket 连接
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		// origin := r.Header.Get("Origin")
		// return origin == "http://localhost:12345"
		return true
	},
}

// Client represents a connected client
type Client struct {
	conn    *websocket.Conn
	writeMu sync.Mutex
}

func (c *Client) WriteJSON(v any) error {
	c.writeMu.Lock()
	defer c.writeMu.Unlock()
	return c.conn.WriteJSON(v)
}

// Message represents a message from a client
type Message struct {
	Sender    string `json:"sender"`
	Recipient string `json:"recipient"`
	Content   string `json:"content"`
}

var clients = make(map[*Client]bool)
var broadcast = make(chan Message)

// 定义最大连接数
const maxClients = 1

// 定义计数器和互斥锁
var (
	connectionCount int
	mutex           sync.Mutex
)

func handleConnections(w http.ResponseWriter, r *http.Request) {
	// 限制最大连接数，加锁以确保线程安全
	mutex.Lock()
	defer mutex.Unlock()
	// 检查连接数是否超过最大限制
	if connectionCount > maxClients {
		// http.Error(w, "达到最大连接数", http.StatusServiceUnavailable)
		fmt.Println("达到最大连接数!")
		return
	}
	// 增加连接数
	connectionCount++
	defer func() {
		connectionCount--
	}()

	//// 升级 HTTP 连接为 WebSocket 连接
	conn, err := upgrader.Upgrade(w, r, nil)
	// 设置最大消息大小
	conn.SetReadLimit(512 * 1024)
	// // 设置读取超时时间
	// conn.SetReadDeadline(time.Now().Add(time.Second * 60))
	// // 设置写入超时时间
	// conn.SetWriteDeadline(time.Now().Add(time.Second * 10))
	// // 设置压缩
	// conn.EnableWriteCompression(true)
	// conn.SetCompressionLevel(gzip.BestSpeed)
	// // 设置 ping handler
	// conn.SetPingHandler(func(appData string) error {
	// 	// 收到 ping 后更新读取超时
	// 	conn.SetReadDeadline(time.Now().Add(60 * time.Second))
	// 	// 回复 pong
	// 	return conn.WriteControl(websocket.PongMessage, []byte{}, time.Now().Add(10*time.Second))
	// })
	// // 设置 pong handler
	// conn.SetPongHandler(func(appData string) error {
	// 	// 收到 pong 后更新读取超时
	// 	conn.SetReadDeadline(time.Now().Add(60 * time.Second))
	// 	return nil
	// })

	if err != nil {
		log.Println(err)
		return
	}
	defer conn.Close()

	client := &Client{conn: conn}
	clients[client] = true

	fmt.Println("Client connected")

	// 时刻等待接收客户端的消息
	for {
		var msg Message
		err := conn.ReadJSON(&msg)
		if err != nil {
			// log.Println(err)
			delete(clients, client)
			break
		}

		broadcast <- msg
	}
}

func handleMessages() {
	// 时刻处理等待发送给客户端的消息
	for {
		msg := <-broadcast

		for client := range clients {
			if client.conn != nil {
				err := client.WriteJSON(msg) //支持并发
				if err != nil {
					// log.Println(err)
					client.conn.Close()
					delete(clients, client)
				}
			}
		}
	}
}

// go run server.go
func main() {
	http.HandleFunc("/", handleConnections)
	go handleMessages()

	fmt.Println("WebSocket server listening on :8080")
	log.Fatal(http.ListenAndServe(":12345", nil))
}
